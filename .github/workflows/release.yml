name: Build and Release Go Artifacts

on:
  push:
    branches: [main]
    tags:
      - "v*"
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"

      - name: Install dependencies
        run: go get .

      - name: Verify dependencies
        run: go mod verify

      - name: Scan for vulnerabilities
        uses: golang/govulncheck-action@v1
        with:
          go-version-input: 1.24
          check-latest: true

      - name: Run tests
        run: go test -v ./...

      - name: Set version
        id: version
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION=$(git rev-parse --short HEAD)
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "VERSION=${VERSION}"
          echo "RELEASE_NAME=${VERSION}" >> $GITHUB_ENV

      - name: Build for multiple architectures
        run: |
          mkdir -p ./bin
          MODULE_NAME=$(grep -m 1 'module' go.mod | awk '{print $2}' | xargs basename)
          ARCHITECTURES=(
            "linux,amd64"
            "linux,arm64"
            "windows,amd64"
          )
                     
          for ARCH in "${ARCHITECTURES[@]}"; do
            IFS=',' read -r OS PLATFORM <<< "$ARCH"            
            BINARY_NAME="${MODULE_NAME}_${OS}_${PLATFORM}_${VERSION}"
            if [ "$OS" == "windows" ]; then
              BINARY_NAME="${BINARY_NAME}.exe"
            fi
            
            echo "Building for ${OS}/${PLATFORM}..."
            GOOS=$OS GOARCH=$PLATFORM go build -ldflags="-X main.Version=${VERSION}" -o "./bin/${BINARY_NAME}" .
            sha256sum "./bin/${BINARY_NAME}" > "./bin/${BINARY_NAME}.sha256"            
          done

          cd ./bin
          tar -czvf "${MODULE_NAME}_all_${VERSION}.tar.gz" *
          cd ..

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: ./bin/
          retention-days: 7

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: ./binaries

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: ./binaries/*
          draft: false
          prerelease: false
          generate_release_notes: false
