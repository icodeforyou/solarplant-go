name: Build and Release Artifacts and Docker Image

on:
  push:
    tags:
      - "v*"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"

      - name: Install dependencies
        run: go get .

      - name: Verify dependencies
        run: go mod verify

      - name: Run tests
        run: go test -v ./...

      - name: Build for multiple architectures
        run: |
          mkdir -p ./bin
          MODULE_NAME=$(grep -m 1 'module' go.mod | awk '{print $2}' | xargs basename)
          ARCHITECTURES=(
            "linux,amd64"
            "linux,arm64"
          )
                                 
          for ARCH in "${ARCHITECTURES[@]}"; do
            IFS=',' read -r OS PLATFORM <<< "$ARCH"            
            BINARY_NAME="${MODULE_NAME}_${OS}_${PLATFORM}_${{github.ref_name}}"
            echo "Building for ${OS}/${PLATFORM}..."
            GOOS=$OS GOARCH=$PLATFORM go build -ldflags="-X main.Version=${{github.ref_name}}" -o "./bin/${BINARY_NAME}" .
            sha256sum "./bin/${BINARY_NAME}" > "./bin/${BINARY_NAME}.sha256"            
          done

          cd ./bin
          tar -czvf "${MODULE_NAME}_all_${{github.ref_name}}.tar.gz" *
          cd ..

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: ./bin/
          retention-days: 7

  release-artifacts:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: ./binaries

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: ./binaries/*
          draft: false
          prerelease: false
          generate_release_notes: false
  
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ github.ref_name }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true   
